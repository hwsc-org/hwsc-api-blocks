/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.hwsc.Algorithm', null, global);
goog.exportSymbol('proto.hwsc.Header', null, global);
goog.exportSymbol('proto.hwsc.Payload', null, global);
goog.exportSymbol('proto.hwsc.Permission', null, global);
goog.exportSymbol('proto.hwsc.Token', null, global);
goog.exportSymbol('proto.hwsc.Type', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hwsc.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hwsc.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hwsc.Header.displayName = 'proto.hwsc.Header';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hwsc.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.hwsc.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hwsc.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hwsc.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    alg: jspb.Message.getFieldWithDefault(msg, 1, 0),
    typ: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hwsc.Header}
 */
proto.hwsc.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hwsc.Header;
  return proto.hwsc.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hwsc.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hwsc.Header}
 */
proto.hwsc.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.hwsc.Algorithm} */ (reader.readEnum());
      msg.setAlg(value);
      break;
    case 2:
      var value = /** @type {!proto.hwsc.Type} */ (reader.readEnum());
      msg.setTyp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hwsc.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hwsc.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hwsc.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hwsc.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlg();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTyp();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Algorithm alg = 1;
 * @return {!proto.hwsc.Algorithm}
 */
proto.hwsc.Header.prototype.getAlg = function() {
  return /** @type {!proto.hwsc.Algorithm} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.hwsc.Algorithm} value */
proto.hwsc.Header.prototype.setAlg = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Type typ = 2;
 * @return {!proto.hwsc.Type}
 */
proto.hwsc.Header.prototype.getTyp = function() {
  return /** @type {!proto.hwsc.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.hwsc.Type} value */
proto.hwsc.Header.prototype.setTyp = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hwsc.Payload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hwsc.Payload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hwsc.Payload.displayName = 'proto.hwsc.Payload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hwsc.Payload.prototype.toObject = function(opt_includeInstance) {
  return proto.hwsc.Payload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hwsc.Payload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hwsc.Payload.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    permissionLevel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    expirationTimestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hwsc.Payload}
 */
proto.hwsc.Payload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hwsc.Payload;
  return proto.hwsc.Payload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hwsc.Payload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hwsc.Payload}
 */
proto.hwsc.Payload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {!proto.hwsc.Permission} */ (reader.readEnum());
      msg.setPermissionLevel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpirationTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hwsc.Payload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hwsc.Payload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hwsc.Payload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hwsc.Payload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPermissionLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getExpirationTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.hwsc.Payload.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.hwsc.Payload.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Permission permission_level = 2;
 * @return {!proto.hwsc.Permission}
 */
proto.hwsc.Payload.prototype.getPermissionLevel = function() {
  return /** @type {!proto.hwsc.Permission} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.hwsc.Permission} value */
proto.hwsc.Payload.prototype.setPermissionLevel = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 expiration_timestamp = 3;
 * @return {number}
 */
proto.hwsc.Payload.prototype.getExpirationTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.hwsc.Payload.prototype.setExpirationTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hwsc.Token = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hwsc.Token, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.hwsc.Token.displayName = 'proto.hwsc.Token';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hwsc.Token.prototype.toObject = function(opt_includeInstance) {
  return proto.hwsc.Token.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hwsc.Token} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hwsc.Token.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.hwsc.Header.toObject(includeInstance, f),
    payload: (f = msg.getPayload()) && proto.hwsc.Payload.toObject(includeInstance, f),
    signature: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hwsc.Token}
 */
proto.hwsc.Token.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hwsc.Token;
  return proto.hwsc.Token.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hwsc.Token} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hwsc.Token}
 */
proto.hwsc.Token.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hwsc.Header;
      reader.readMessage(value,proto.hwsc.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.hwsc.Payload;
      reader.readMessage(value,proto.hwsc.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hwsc.Token.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hwsc.Token.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hwsc.Token} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hwsc.Token.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hwsc.Header.serializeBinaryToWriter
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hwsc.Payload.serializeBinaryToWriter
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.hwsc.Header}
 */
proto.hwsc.Token.prototype.getHeader = function() {
  return /** @type{?proto.hwsc.Header} */ (
    jspb.Message.getWrapperField(this, proto.hwsc.Header, 1));
};


/** @param {?proto.hwsc.Header|undefined} value */
proto.hwsc.Token.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.hwsc.Token.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hwsc.Token.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Payload payload = 2;
 * @return {?proto.hwsc.Payload}
 */
proto.hwsc.Token.prototype.getPayload = function() {
  return /** @type{?proto.hwsc.Payload} */ (
    jspb.Message.getWrapperField(this, proto.hwsc.Payload, 2));
};


/** @param {?proto.hwsc.Payload|undefined} value */
proto.hwsc.Token.prototype.setPayload = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.hwsc.Token.prototype.clearPayload = function() {
  this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.hwsc.Token.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string signature = 3;
 * @return {string}
 */
proto.hwsc.Token.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.hwsc.Token.prototype.setSignature = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.hwsc.Permission = {
  NO_PERM: 0,
  USER: 1,
  ADMIN: 2
};

/**
 * @enum {number}
 */
proto.hwsc.Algorithm = {
  NO_ALG: 0,
  HS256: 1,
  HS512: 2
};

/**
 * @enum {number}
 */
proto.hwsc.Type = {
  NO_TYPE: 0,
  JWT: 1
};

goog.object.extend(exports, proto.hwsc);

syntax = "proto3";

package hwscUserSvc;

import "user.proto";
import "authority.proto";

option go_package = "hwsc";

// NOTES:
// any user object returned by svc, will have password field empty string
// use bson tags when objects get uploaded to mongodb

service UserService {
    rpc GetStatus (UserRequest) returns (UserResponse) {
    }

    // chrome fills out registration page and make request to register
    // gateway passes User filled object
    // svc will look through user documents and see if email is already taken
    // svc will create a new mongo document and insert to user collection if email not taken
    // svc will also hash password before storing
    // svc returns OK with User object || email is already taken error || service is down error

    // if OK, chrome stores User object, and redirects to search page
    // else, chrome stays on registration page and display error msg
    rpc CreateUser (UserRequest) returns (UserResponse) {
    }

    // chrome requests to delete user from user profile page
    // gateway passes the User object obtained when logging in
    // svc will archive the users public documents and delete private documents?
    // svc will traverse through shared files, go through each friend and delete shared documents
    // svc returns OK && grpc status code 0 && the deleted User,
    //      || cannot delete for whatever reason || service is down error

    // if OK, chrome redirects to login page
    // else, chrome stays on user profile page and displays error msg
    rpc DeleteUser (UserRequest) returns (UserResponse) {
    }

    // chrome makes changes to a copy of User object (obtained when logged in), from user profile page
    // gateway passes the modified User object
    // svc will check that if the email changed, go through users documents to check for duplicated email
    // svc will then do partial or complete update on users document?
    // svc returns OK && grpc status code 0 && updated User object
    //       || email is already taken error || service is down error

    // if OK, chrome sets offical User object with copy User object, displays success msg to user
    // else, chrome will display error msg
    rpc UpdateUser (UserRequest) returns (UserResponse) {
    }

    // chrome stores email/password in an object and makes request to login from login page
    // gateway passes email/password object
    // svc will look through user document for matching email
    // svc will then match password (dehash, then match)
    // svc will start session????
    // svc returns OK with User object (with password nulled?) and some kind of session token?
    //      || email doesn't match error
    //      || if email match, password doesn't match error
    //      || service is down error

    // if OK, chrome will store user object and whatever token?, redirect to search page
    // else, chrome will display error msg
    rpc AuthenticateUser (UserRequest) returns (UserResponse) {
    }

    // get list of all users in user collection
    rpc ListUsers (UserRequest) returns (UserResponse) {
    }

    // THINGS GET KIND OF CONFUSING FROM HERE --------------------------------------

    // chrome makes request to add friend by providing email? or by first and/or last name?
    // gateway passes email (or first and last name)
    // svc will look through user documents for matching email or name
    // svc returns OK with found Users || email/name not found error || service is down error

    // if OK, chrome will display Users first and last name and ask for confirmation?
    //      || display list of matched names and corresponding emails and ask user to select correct one
    //   Once user selects or confirms, chrome will store the matched users object under friends object
    // else, chrome will display not found msg or error msg
    rpc GetUser (UserRequest) returns (UserResponse) {
    }

    // chrome makes request to share documents with found user
    // gateway passes
    //    1) request makers User object
    //    2) a list of DUIDS to share with
    //    3) found User object
    // svc will...
    rpc ShareDocument (UserRequest) returns (UserResponse) {
    }

    // chrome makes request to delete document/s
    // gateway passes
    //      1) document/s to delete
    //      2) User object
    // svc will go through users object documents map and delete key's (duid)
    // svc will...
    //    rpc DeleteDocuments (UserRequest) returns (UserResponse) {}

    rpc GetToken (UserRequest) returns (UserResponse) {
    }
    rpc VerifyToken (UserRequest) returns (UserResponse) {
    }
    rpc GetSecret (UserRequest) returns (UserResponse) {
    }

    // TODO add a REST endpoint later
    rpc NewSecret (UserRequest) returns (UserResponse) {
    }
}

message UserRequest {
    hwsc.Authority authority = 1;
    hwsc.User user = 2;
    string duid = 3;
    repeated string uuids_to_share_duid = 4;
}

message UserResponse {
    oneof status {
        uint32 code = 1;
    }
    string message = 2;
    hwsc.Authority authority = 3;
    hwsc.User user = 4;
    repeated hwsc.User user_collection = 5; // for ListUsers response
}

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.lib.Document', null, global);
goog.exportSymbol('proto.lib.FileMetadataTransaction', null, global);
goog.exportSymbol('proto.lib.FileType', null, global);
goog.exportSymbol('proto.lib.Publisher', null, global);
goog.exportSymbol('proto.lib.QueryTransaction', null, global);
goog.exportSymbol('proto.lib.StudySite', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lib.Publisher = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lib.Publisher, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lib.Publisher.displayName = 'proto.lib.Publisher';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lib.StudySite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lib.StudySite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lib.StudySite.displayName = 'proto.lib.StudySite';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lib.FileMetadataTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lib.FileMetadataTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lib.FileMetadataTransaction.displayName = 'proto.lib.FileMetadataTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lib.QueryTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lib.QueryTransaction.repeatedFields_, null);
};
goog.inherits(proto.lib.QueryTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lib.QueryTransaction.displayName = 'proto.lib.QueryTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lib.Document = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lib.Document, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lib.Document.displayName = 'proto.lib.Document';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lib.Publisher.prototype.toObject = function(opt_includeInstance) {
  return proto.lib.Publisher.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lib.Publisher} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lib.Publisher.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    firstName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lib.Publisher}
 */
proto.lib.Publisher.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lib.Publisher;
  return proto.lib.Publisher.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lib.Publisher} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lib.Publisher}
 */
proto.lib.Publisher.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lib.Publisher.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lib.Publisher.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lib.Publisher} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lib.Publisher.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFirstName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string last_name = 1;
 * @return {string}
 */
proto.lib.Publisher.prototype.getLastName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.lib.Publisher.prototype.setLastName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string first_name = 2;
 * @return {string}
 */
proto.lib.Publisher.prototype.getFirstName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.lib.Publisher.prototype.setFirstName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lib.StudySite.prototype.toObject = function(opt_includeInstance) {
  return proto.lib.StudySite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lib.StudySite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lib.StudySite.toObject = function(includeInstance, msg) {
  var f, obj = {
    city: jspb.Message.getFieldWithDefault(msg, 1, ""),
    state: jspb.Message.getFieldWithDefault(msg, 2, ""),
    province: jspb.Message.getFieldWithDefault(msg, 3, ""),
    country: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lib.StudySite}
 */
proto.lib.StudySite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lib.StudySite;
  return proto.lib.StudySite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lib.StudySite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lib.StudySite}
 */
proto.lib.StudySite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvince(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lib.StudySite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lib.StudySite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lib.StudySite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lib.StudySite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProvince();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string city = 1;
 * @return {string}
 */
proto.lib.StudySite.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.lib.StudySite.prototype.setCity = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string state = 2;
 * @return {string}
 */
proto.lib.StudySite.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.lib.StudySite.prototype.setState = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string province = 3;
 * @return {string}
 */
proto.lib.StudySite.prototype.getProvince = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.lib.StudySite.prototype.setProvince = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string country = 4;
 * @return {string}
 */
proto.lib.StudySite.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.lib.StudySite.prototype.setCountry = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lib.FileMetadataTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.lib.FileMetadataTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lib.FileMetadataTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lib.FileMetadataTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    duid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    uuid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    media: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lib.FileMetadataTransaction}
 */
proto.lib.FileMetadataTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lib.FileMetadataTransaction;
  return proto.lib.FileMetadataTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lib.FileMetadataTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lib.FileMetadataTransaction}
 */
proto.lib.FileMetadataTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDuid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 5:
      var value = /** @type {!proto.lib.FileType} */ (reader.readEnum());
      msg.setMedia(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lib.FileMetadataTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lib.FileMetadataTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lib.FileMetadataTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lib.FileMetadataTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDuid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMedia();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.lib.FileMetadataTransaction.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.lib.FileMetadataTransaction.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string fuid = 2;
 * @return {string}
 */
proto.lib.FileMetadataTransaction.prototype.getFuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.lib.FileMetadataTransaction.prototype.setFuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string duid = 3;
 * @return {string}
 */
proto.lib.FileMetadataTransaction.prototype.getDuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.lib.FileMetadataTransaction.prototype.setDuid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string uuid = 4;
 * @return {string}
 */
proto.lib.FileMetadataTransaction.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.lib.FileMetadataTransaction.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional FileType media = 5;
 * @return {!proto.lib.FileType}
 */
proto.lib.FileMetadataTransaction.prototype.getMedia = function() {
  return /** @type {!proto.lib.FileType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.lib.FileType} value */
proto.lib.FileMetadataTransaction.prototype.setMedia = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lib.QueryTransaction.repeatedFields_ = [1,2,3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lib.QueryTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.lib.QueryTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lib.QueryTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lib.QueryTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    publishersList: jspb.Message.toObjectList(msg.getPublishersList(),
    proto.lib.Publisher.toObject, includeInstance),
    studySitesList: jspb.Message.toObjectList(msg.getStudySitesList(),
    proto.lib.StudySite.toObject, includeInstance),
    callTypeNamesList: jspb.Message.getRepeatedField(msg, 3),
    groundTypesList: jspb.Message.getRepeatedField(msg, 4),
    sensorTypesList: jspb.Message.getRepeatedField(msg, 5),
    sensorNamesList: jspb.Message.getRepeatedField(msg, 6),
    minRecordTimestamp: jspb.Message.getFieldWithDefault(msg, 7, 0),
    maxRecordTimestamp: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lib.QueryTransaction}
 */
proto.lib.QueryTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lib.QueryTransaction;
  return proto.lib.QueryTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lib.QueryTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lib.QueryTransaction}
 */
proto.lib.QueryTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lib.Publisher;
      reader.readMessage(value,proto.lib.Publisher.deserializeBinaryFromReader);
      msg.addPublishers(value);
      break;
    case 2:
      var value = new proto.lib.StudySite;
      reader.readMessage(value,proto.lib.StudySite.deserializeBinaryFromReader);
      msg.addStudySites(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addCallTypeNames(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addGroundTypes(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addSensorTypes(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addSensorNames(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinRecordTimestamp(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxRecordTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lib.QueryTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lib.QueryTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lib.QueryTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lib.QueryTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublishersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.lib.Publisher.serializeBinaryToWriter
    );
  }
  f = message.getStudySitesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.lib.StudySite.serializeBinaryToWriter
    );
  }
  f = message.getCallTypeNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getGroundTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getSensorTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getSensorNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getMinRecordTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getMaxRecordTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
};


/**
 * repeated Publisher publishers = 1;
 * @return {!Array<!proto.lib.Publisher>}
 */
proto.lib.QueryTransaction.prototype.getPublishersList = function() {
  return /** @type{!Array<!proto.lib.Publisher>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lib.Publisher, 1));
};


/** @param {!Array<!proto.lib.Publisher>} value */
proto.lib.QueryTransaction.prototype.setPublishersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.lib.Publisher=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lib.Publisher}
 */
proto.lib.QueryTransaction.prototype.addPublishers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.lib.Publisher, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.lib.QueryTransaction.prototype.clearPublishersList = function() {
  this.setPublishersList([]);
};


/**
 * repeated StudySite study_sites = 2;
 * @return {!Array<!proto.lib.StudySite>}
 */
proto.lib.QueryTransaction.prototype.getStudySitesList = function() {
  return /** @type{!Array<!proto.lib.StudySite>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lib.StudySite, 2));
};


/** @param {!Array<!proto.lib.StudySite>} value */
proto.lib.QueryTransaction.prototype.setStudySitesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.lib.StudySite=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lib.StudySite}
 */
proto.lib.QueryTransaction.prototype.addStudySites = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.lib.StudySite, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.lib.QueryTransaction.prototype.clearStudySitesList = function() {
  this.setStudySitesList([]);
};


/**
 * repeated string call_type_names = 3;
 * @return {!Array<string>}
 */
proto.lib.QueryTransaction.prototype.getCallTypeNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.lib.QueryTransaction.prototype.setCallTypeNamesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.lib.QueryTransaction.prototype.addCallTypeNames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.lib.QueryTransaction.prototype.clearCallTypeNamesList = function() {
  this.setCallTypeNamesList([]);
};


/**
 * repeated string ground_types = 4;
 * @return {!Array<string>}
 */
proto.lib.QueryTransaction.prototype.getGroundTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.lib.QueryTransaction.prototype.setGroundTypesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.lib.QueryTransaction.prototype.addGroundTypes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.lib.QueryTransaction.prototype.clearGroundTypesList = function() {
  this.setGroundTypesList([]);
};


/**
 * repeated string sensor_types = 5;
 * @return {!Array<string>}
 */
proto.lib.QueryTransaction.prototype.getSensorTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.lib.QueryTransaction.prototype.setSensorTypesList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.lib.QueryTransaction.prototype.addSensorTypes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.lib.QueryTransaction.prototype.clearSensorTypesList = function() {
  this.setSensorTypesList([]);
};


/**
 * repeated string sensor_names = 6;
 * @return {!Array<string>}
 */
proto.lib.QueryTransaction.prototype.getSensorNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.lib.QueryTransaction.prototype.setSensorNamesList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.lib.QueryTransaction.prototype.addSensorNames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.lib.QueryTransaction.prototype.clearSensorNamesList = function() {
  this.setSensorNamesList([]);
};


/**
 * optional int64 min_record_timestamp = 7;
 * @return {number}
 */
proto.lib.QueryTransaction.prototype.getMinRecordTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.lib.QueryTransaction.prototype.setMinRecordTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 max_record_timestamp = 8;
 * @return {number}
 */
proto.lib.QueryTransaction.prototype.getMaxRecordTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.lib.QueryTransaction.prototype.setMaxRecordTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lib.Document.prototype.toObject = function(opt_includeInstance) {
  return proto.lib.Document.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lib.Document} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lib.Document.toObject = function(includeInstance, msg) {
  var f, obj = {
    duid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    publisherName: (f = msg.getPublisherName()) && proto.lib.Publisher.toObject(includeInstance, f),
    callTypeName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    groundType: jspb.Message.getFieldWithDefault(msg, 5, ""),
    description: jspb.Message.getFieldWithDefault(msg, 6, ""),
    studySite: (f = msg.getStudySite()) && proto.lib.StudySite.toObject(includeInstance, f),
    ocean: jspb.Message.getFieldWithDefault(msg, 8, ""),
    sensorType: jspb.Message.getFieldWithDefault(msg, 9, ""),
    sensorName: jspb.Message.getFieldWithDefault(msg, 10, ""),
    samplingRate: jspb.Message.getFieldWithDefault(msg, 11, 0),
    latitude: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    longitude: +jspb.Message.getFieldWithDefault(msg, 13, 0.0),
    imageUrlsMapMap: (f = msg.getImageUrlsMapMap()) ? f.toObject(includeInstance, undefined) : [],
    audioUrlsMapMap: (f = msg.getAudioUrlsMapMap()) ? f.toObject(includeInstance, undefined) : [],
    videoUrlsMapMap: (f = msg.getVideoUrlsMapMap()) ? f.toObject(includeInstance, undefined) : [],
    fileUrlsMapMap: (f = msg.getFileUrlsMapMap()) ? f.toObject(includeInstance, undefined) : [],
    recordTimestamp: jspb.Message.getFieldWithDefault(msg, 18, 0),
    createTimestamp: jspb.Message.getFieldWithDefault(msg, 19, 0),
    updateTimestamp: jspb.Message.getFieldWithDefault(msg, 20, 0),
    isPublic: jspb.Message.getFieldWithDefault(msg, 21, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lib.Document}
 */
proto.lib.Document.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lib.Document;
  return proto.lib.Document.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lib.Document} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lib.Document}
 */
proto.lib.Document.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = new proto.lib.Publisher;
      reader.readMessage(value,proto.lib.Publisher.deserializeBinaryFromReader);
      msg.setPublisherName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallTypeName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroundType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 7:
      var value = new proto.lib.StudySite;
      reader.readMessage(value,proto.lib.StudySite.deserializeBinaryFromReader);
      msg.setStudySite(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOcean(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSensorType(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSensorName(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSamplingRate(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLatitude(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLongitude(value);
      break;
    case 14:
      var value = msg.getImageUrlsMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 15:
      var value = msg.getAudioUrlsMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 16:
      var value = msg.getVideoUrlsMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 17:
      var value = msg.getFileUrlsMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRecordTimestamp(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreateTimestamp(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateTimestamp(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPublic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lib.Document.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lib.Document.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lib.Document} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lib.Document.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPublisherName();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lib.Publisher.serializeBinaryToWriter
    );
  }
  f = message.getCallTypeName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGroundType();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getStudySite();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.lib.StudySite.serializeBinaryToWriter
    );
  }
  f = message.getOcean();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSensorType();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSensorName();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getSamplingRate();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getImageUrlsMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(14, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getAudioUrlsMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getVideoUrlsMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(16, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getFileUrlsMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(17, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getRecordTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      18,
      f
    );
  }
  f = message.getCreateTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      19,
      f
    );
  }
  f = message.getUpdateTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      20,
      f
    );
  }
  f = message.getIsPublic();
  if (f) {
    writer.writeBool(
      21,
      f
    );
  }
};


/**
 * optional string duid = 1;
 * @return {string}
 */
proto.lib.Document.prototype.getDuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.lib.Document.prototype.setDuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.lib.Document.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.lib.Document.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Publisher publisher_name = 3;
 * @return {?proto.lib.Publisher}
 */
proto.lib.Document.prototype.getPublisherName = function() {
  return /** @type{?proto.lib.Publisher} */ (
    jspb.Message.getWrapperField(this, proto.lib.Publisher, 3));
};


/** @param {?proto.lib.Publisher|undefined} value */
proto.lib.Document.prototype.setPublisherName = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.lib.Document.prototype.clearPublisherName = function() {
  this.setPublisherName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lib.Document.prototype.hasPublisherName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string call_type_name = 4;
 * @return {string}
 */
proto.lib.Document.prototype.getCallTypeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.lib.Document.prototype.setCallTypeName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string ground_type = 5;
 * @return {string}
 */
proto.lib.Document.prototype.getGroundType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.lib.Document.prototype.setGroundType = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string description = 6;
 * @return {string}
 */
proto.lib.Document.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.lib.Document.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional StudySite study_site = 7;
 * @return {?proto.lib.StudySite}
 */
proto.lib.Document.prototype.getStudySite = function() {
  return /** @type{?proto.lib.StudySite} */ (
    jspb.Message.getWrapperField(this, proto.lib.StudySite, 7));
};


/** @param {?proto.lib.StudySite|undefined} value */
proto.lib.Document.prototype.setStudySite = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.lib.Document.prototype.clearStudySite = function() {
  this.setStudySite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lib.Document.prototype.hasStudySite = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string ocean = 8;
 * @return {string}
 */
proto.lib.Document.prototype.getOcean = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.lib.Document.prototype.setOcean = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string sensor_type = 9;
 * @return {string}
 */
proto.lib.Document.prototype.getSensorType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.lib.Document.prototype.setSensorType = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string sensor_name = 10;
 * @return {string}
 */
proto.lib.Document.prototype.getSensorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.lib.Document.prototype.setSensorName = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional uint32 sampling_rate = 11;
 * @return {number}
 */
proto.lib.Document.prototype.getSamplingRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.lib.Document.prototype.setSamplingRate = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional float latitude = 12;
 * @return {number}
 */
proto.lib.Document.prototype.getLatitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.lib.Document.prototype.setLatitude = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional float longitude = 13;
 * @return {number}
 */
proto.lib.Document.prototype.getLongitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.lib.Document.prototype.setLongitude = function(value) {
  jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * map<string, string> image_urls_map = 14;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.lib.Document.prototype.getImageUrlsMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 14, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.lib.Document.prototype.clearImageUrlsMapMap = function() {
  this.getImageUrlsMapMap().clear();
};


/**
 * map<string, string> audio_urls_map = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.lib.Document.prototype.getAudioUrlsMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 15, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.lib.Document.prototype.clearAudioUrlsMapMap = function() {
  this.getAudioUrlsMapMap().clear();
};


/**
 * map<string, string> video_urls_map = 16;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.lib.Document.prototype.getVideoUrlsMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 16, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.lib.Document.prototype.clearVideoUrlsMapMap = function() {
  this.getVideoUrlsMapMap().clear();
};


/**
 * map<string, string> file_urls_map = 17;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.lib.Document.prototype.getFileUrlsMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 17, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.lib.Document.prototype.clearFileUrlsMapMap = function() {
  this.getFileUrlsMapMap().clear();
};


/**
 * optional int64 record_timestamp = 18;
 * @return {number}
 */
proto.lib.Document.prototype.getRecordTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.lib.Document.prototype.setRecordTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int64 create_timestamp = 19;
 * @return {number}
 */
proto.lib.Document.prototype.getCreateTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.lib.Document.prototype.setCreateTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int64 update_timestamp = 20;
 * @return {number}
 */
proto.lib.Document.prototype.getUpdateTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.lib.Document.prototype.setUpdateTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional bool is_public = 21;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.lib.Document.prototype.getIsPublic = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 21, false));
};


/** @param {boolean} value */
proto.lib.Document.prototype.setIsPublic = function(value) {
  jspb.Message.setProto3BooleanField(this, 21, value);
};


/**
 * @enum {number}
 */
proto.lib.FileType = {
  FILE: 0,
  AUDIO: 1,
  IMAGE: 2,
  VIDEO: 3
};

goog.object.extend(exports, proto.lib);
